前段编程概述：
  Web是JavaScript最初的运行环境，浏览器上js最初的运行环境。阅读完这章的期望。希望读者能
  ·理解Web应用程序的基础架构，以及浏览器在该架构中所扮演的角色
  ·了解如何在HTML文档中嵌入JavaScript代码
  ·了解如何在前端环境中进行JavaScript的模块化编程：
  ·初步认识JavaScript在浏览器中实际要处理的对象。
6.1浏览器扮演的角色
  Web应用市场之所以有如此庞大的市场，得益于俩个客观成熟的条件：
  ·高速网络基础设施的大量铺设，数据传输带来的延时对应用程序带来的不利影响越来越小。这样我们就可以将应用程序的不同组件部署在不同的设备中，然后用网络将其连接起来。这样的用户体验
   和将应用程序全部部署在同一台设备是一样的
  ·程序员可以将应用程序部署在服务器上，用户通过各种客户端来访问并使用它。这即降低了应用程序的部署成本，也丰富了应用程序的使用方法。在编程方法论中，我们通常称这种部署方法为客户端/服务器架构
  简称C/S结构。
  而wWeb应用程序的架构则是在C/S架构上做了更近一步的改善，它将客户端承担的角色统一到了Web服务器中，只用用户的设备上安装了Web服务器，就能使用部署在服务器上的应用程序。在编程方法论
  中，我们通常称这种开发并部署应用程序为浏览器/服务器架构，简称B/S架构。在B/S架构下的分工
  ·Web服务器在B/S架构下所承担的角色通常被称为Web应用程序的后端，主要负责存储并处理用户的请求，然后将响应数据返回给用户所在的Web浏览器。它一般负责处理复杂的业务逻辑，包括执行大型运输
  、存储海量数据，开发与维护的成本都比较高
  ·Web浏览器在B/S架构下所承担的角色通常被称为Web应用程序的前端，主要负责提供应用程序的用户操作界面，以及向Web服务器提交请求数据并接受来自服务器的响应数据。它一般用于处理与用户
  交互相关的业务逻辑，包括呈现数据、响应用户操作等。这部分开发与维护主要受浏览器影响。
6.2明确前端开发任务
  要想进行Web应用程序的前端开发，我们首先需要熟悉自己的应用程序主要面向的运行环境-Web浏览器。就目前来说，浏览器之间的差异主要来自于它们采用的渲染引擎。
  Trident:Internet Explorer浏览器所采用的渲染引擎。除此之外，采用该引擎渲染的浏览器还有Avant、Sleipnir、KKman等。由于Internet Explorer浏览器所市场上占有率最高的桌面
  操作系统——Windows的内置浏览器。到目前为止国内主要的网上银行都只支持Internet Exploerer浏览器。
  Gecko:FireFox浏览器采用的引擎
  Webkit：最初是Safari浏览器采用的渲染引擎，后来Chrome浏览器也采用了这一引擎。目前，Chrome浏览器已经是浏览器领域的领头羊。
简单介绍下浏览器的工作原理：
浏览器的主要功能就是向Web应用程序所在的服务器发出请求，如何在浏览器窗口中展示服务器返回的响应数据。这里的响应数据一般包括，html文档，PDF文件，图片，视频等不同类型的资源。具体来说
浏览器按照分工可分成以下几个组成部分。
  ·用户界面：负责将用户的请求数据交给浏览器引擎，后者将其发送给服务器。
  ·浏览器引擎：这一部分主要负责在用户界面和渲染引擎之间传送数据与操作指令，以及向服务器发送请求并接受响应。它是整个服务器的调度中心。
  ·页面渲染引擎：这一部分主要负责显示响应数据的内容，具体来说，就是浏览器在收到服务器返回的数据后，就会交给渲染引擎，如果返回的是html文档，就负责解析Html和Css内容，并将解析结果
  排版后显示在屏幕。如果返回的响应数据是javascript代码，就去调用js解释器，以便解释并执行代码。
  ·前端数据获取：Web应用在某些情况下会需要在客户端储存一些数据，例如允许浏览器记住用户名和密码等，这时候就需要用到Cookie以及HTML5新定义的“网络数据库”这一类浏览器端端数据储存功能。

6.3前端编程中的JavaScript
6.3.1<script>标签
在浏览器环境下，Javascript代码是通过html的<script>标签嵌套在Web页面中。总而言之，Javascript通过<script>标签嵌套在HTML文档中的方式主要有三种。
  ·同步执行模式：在这种模式下，我们通常会允许浏览器按照其html文档的顺序执行<script>标签中的Javascript代码。由于浏览器是从上往下逐行读取html文档的，所以我们经常会js代码直接内联在<script>
  标签中，并将该标签放在所有元素后面。
  内联形式的Javascript脚步通常只适合编写少量的代码。如何大量的Javascript代码与HTML标签混合在一起，会严重影响代码的可读性，这将给项目后期维护带来无穷无尽的麻烦。对于需要大量嵌入代码的情况吗我们
  通常外挂Js代码文件。
  ·异步执行模式：由于同步执行模式，会依次读取js文件，为了避免因为文件载入而造成延时影响整个web的读取效率，我们通常还会激活<script>标签的async属性，令浏览器改为异步执行模式。
  ·延后执行模式：<script>标签的上述使用方法依然存在一个问题，即在异步执行模式下，浏览器外链的脚本文件一旦完成载入就会立刻执行，程序员无法确定脚本具体被执行的时间，所以就引入了defer属性
  在html完全加载后，才执行html。
6.3.2ES6标准新增的模块机制
  随着代码量的增加、命名冲突、代码安全等问题随之而来

  
