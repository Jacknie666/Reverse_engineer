                               Web Js逆向
  Web页面大家都不陌生，在Web开发中后端负责程序架构和数据管理，前段负责页面展示和用户交互，有一种不严谨的说法：前段代码
给浏览器看，后段代码给服务器看。
  有经验的程序员对前后端交互的理解也会更深一些，在这种前后端分离的开发方式中，以接口为标准来进行联合调整。为了保证接口在调用的
数据的安全性，也为了防止参数被篡改，大多数接口都进行了请求签名，身份验证，动态cookie等机制。另外，部分网站会对返回的数据进行加
密，通常利用AES，RSA等加密方式，也有在传输时对数据进行数列化，比如Protobuf等，这些会在后面进行详细讲解。
  请求签名也十分常见，比如URL中的加密参数sign，身份验证也有很多例子，比如动态Cookie。这些参数的生成都是由js来控制，如果想直
接从接口上获取数据，就要去调试分析javascript的调用逻辑，堆栈的调用关系来弄清楚网站加密方式的实现方法，根据网站的参生成规则还原
加密参数，这个过程称为js逆向。
  目前常用的加密参数逆向方式，一种是根据源码生成逻辑还原加密代码，另一种是补环境Copy源码模拟加密参数的生成，还有一种
就是通过RPC的方式远程调用。相比之下补环境跑代码，整体看起来会更加方便与高效。
  而在一些逆向案例中，其中的关键就是将浏览器环境移植到Node环境中，Node js采用的内核也为v8引擎。该引擎调用Js的可信性并不是100%，同时由于Node没有界面渲染，
因此在游览器中可使用的window，navigator，dom等操作在node中是不存在的，所以对于Node的环境搭建和浏览器环境补全也是js逆向需要掌握的。
  值得一提的是chrome作为Js的核心工具，熟练的掌握Chrome的控制台，插件编写就足够应对大多数的抓包、调试、Hook等，这些内容在后续也会进行讲解。
3.1逆向基础
  Js调试相对方便，通常只需要chrome或者其他的一些抓包工具、拓展插件，就能顺利的完成逆向分析。但是js的弱类型与语法多样各种闭包。逗号表达式等
语法让代码的可读性变得不如其他语言通畅。所有需要学习基础语法。
  3.1.1Javascript简介
    首先，Java和Javascript没有任何的从属关系。
    javascript的组成结构：最初是基于Web浏览器的脚本语言，由于Node.js的出现。它才发展为横跨web开发先后端、移动设备端以及桌面应用端的全能型编程语言
  3.1.2语言特性：全能型编程语言仅指javascript的适用领域范围很广
    ·动态化类型：Javascript中的数据类型是直接取决于变量中的值的，变量本身没有数据类型上的制约，这是动态脚本和编译型脚语言的区别之一。javascript的运行环境
     会自动识别储存了什么类型的值。
    ·多范式编程：js即支持面向对象编程，也支持指令式编程和函数式编程，因而具有极为灵活的表达能力
    ·单线程执行：采用单线程的最大好处就是不用想多线程那样很容易产生bug同步的问题，这就从根本解决了死锁问题，也避免了线程上下文交换所带来的性能上的开销。单线程的执行范式也有
     它自己的缺陷，无法发挥多核处理器的性能，一个错误将导致整个程序崩溃。
    ·事件驱动：
    ·异步编程：
  3.1.3js的适用场景
    Web浏览器端的应用、轻量级的服务器应用、轻量级的桌面应用、富媒体式的应用
  3.2.1变量定义
    出于代码可读性的考虑，命名变量应该尽量使用有意义的单词词组。例如匈牙利命名法，将变量的数据类型写到变量名中，如const_strname='owlname'这个变量定义中
用str表示这个是字符串类型的变量。再例如驼峰命名法，遵守这种命名规范的变量名通常由一个以上的单词组成，除了首个字母不大大写，其余字母都大写，如myName等
  3.2.2数据类型
    变量的数据类型可分为5种基本的数据类型：
    Number：数字类型。整数、浮点数】八进制十六进制、指数、infinity与NaN
    String：字符串类型
    Boolean：布尔类型
    undefined:访问一个不存在的变量
    null：通常指空或者值为空
  3.3.1存储类型
  变量的存储类型：原始类型和引用类型
  3.3.2变量的操作
  字符串操作符。在大多数编程语言中，字符串都属于对象数据类型，采用引用的方式来存储。但在js中，字符串属于欧基本数据类型，它的数据组直接存储与变量之中。字符串操作没有单独的操作符
  它只是改变了现有的算法操作符和关系操作符的定义，然后执行字符串操作。例如，只要有一个操作目标为字符串类型，+操作符执行的就是字符串的拼接操作，即使另一个操作目标不说字符串类型
  它会被自动转换为字符串类型。再例如，当操作目标为字符串类型时，>、<、=时比较的就不是字符串大小，而是字符在字母表中的先后顺序
  3.4.1
  3.4.1语句块
  在某些情况下，我们会发现自己用若干行语句描述一个独立于其他部分的意图，这个时候就可以选择用一对大括号构成一个语句块。
  {
  let CNY,exRate,USD;
  CNY;
  exRate;
  USD;
  }
  使用语句块的好处：在独立的变量命名空间中，该可以中命名的任何变量都不会影响到空间外的其它区域，该空间被称为块级做用域
  3.4.2条件语句
  在javascript中，条件语句主要包括if语句和switch语句两种。
  if语法使用方式：单分子形式
                双分支形式
                多分支形式
  switch的用法:switch (expression) {
  case value1:
    // 当 expression 的结果 === value1 时执行的代码
    // ...
    break; // 可选，但通常是必需的

  case value2:
    // 当 expression 的结果 === value2 时执行的代码
    // ...
    break; // 可选

  // 可以有任意数量的 case 子句

  default: // 可选
    // 如果 expression 的结果与以上任何一个 case 都不匹配，则执行这里的代码
    // ...
    break; // 可选 (如果 default 是最后一个子句，break 不是必需的，但加上也无妨)
  }
3.4.3循环语句
  在js中循环句主要包括：for和while语句
3.4.4跳转语句
  break主要作用：主要作用就是让程序直接跳出当前正在执行的条件语句与循环语句。
  continue主要作用：停止当前执行的这一轮循环，直接进入下一轮循环
  return主要作用：主要用于终止函数或者整个程序的执行
  throw主要作用：异常处理机制的一部分，主要用于终止函数或者整个函数的执行
3.5函数与对象
  3.5.1封装的意义
        在编程方法论上，任务之间的依赖关系被称为耦合度，任何任务之间的耦合度越高，它们所组成的程序就越难以维护。为了降低程序中各任务之间的耦合度，程序员在漫长的实践中总结出了一个被称为过程式编程的范式。在这个过程式编程的范式
        中，我们需要将任务打包为独立运行的执行单元，然后让这些执行单元以某种特定的范式进行通讯。在编程术语上这个就叫函数的封装，它在编程中的最大作用之一就是减低程序之间不同任务的耦合度。
        我们可以将封装的意义总结如下  
        ·封装有利于降低不同任务之间的耦合度，提高代码的可维护性。
        ·封装有利于提高代码被重复利用的概率，提高编程的效率。
        ·封装有利于程序对数据的管理与组合，提高代码的执行效率。
        ·封装有助于创建用户自定义的新类型，拓展编程语言自身的表达能力。
  3.5.2函数的运用
        在编程术语中，由任务封装而成的执行单元通常被称为函数。函数是最底层的封装
        function语句形式：
        function [函数名称] （[形参列表]）{[要执行的语句]}
        直接量形式：这种形式的函数通常会将一个被称为函数直接量的值赋值给一个变量
        具体语法如下：[定义字关键名] [变量名] = [函数直接量]；
        [定义变量关键字]可以是var，let和const中的任何一个，至于具体选择哪一个，就取决于我们期待这个函数变量拥有哪个级别的作用域，以及函数本身是否可被修改。
        构造函数形式（通常不建议使用该形式来定义函数）
        具体语法形式：[定义变量关键字] [变量名] = （[形参列表]，[要执行的函数语句]）
  3.5.3函数的调用
        在编程术语中，执行封装在函数的代码的操作通常被称为调用，其语法具体如下
        [函数名称] （[实参列表]）；
        函数名称必须是已经被定义的函数或引用了函数直接量的变量。[实参列表]则是调用方法递给函数的数据。在通常情况下，函数调用方提供的[实参列]应该与被调用的函数声明的[形参类型]一一对应
        但这在js中这种对应关系不是强制的。并且，函数会被储存在一个名在argument的数据结构中。在js调用中，可以使用任意变量的实参
  3.5.4函数就是值
        在javascript中，函数事实上是一种非常特殊的存在。从某种情况上来说，我们能否驾驭js就取决于是否能随心所欲的使用它的函数。函数在js中有特殊的地位。主要是因为它在js不仅是
        封装代码的执行单元，同时也是一种数据类型的值。也就是说，在javascript中，函数可以像数字，字符串意义被当作数据赋给变量，被当作实参传递给另一个函数
  3.5.5使用内置函数
        我们先讨论下"不要重复发明轮子"原则。只要有现成的东西可用，就要避免创建一个一摸一样的东西。
        ·parseInt():   isNaN()
        1.parseInt()函数
        parseInt函数用于将其接收到的实参值（通常是字符串）转换成整数类型输出，如果输出失败就返回NaN。除此之外，该参数还有可选的第二形参，该参数用与输出指定整数的进制，即二进制，八进制，或十六进制。例如十进制转化为字符串
        'AB',十六进制'Ox',首参数以'0',第二参数会被默认为8
        2.parseFloat()函数
        功能与parseInt类似，只不过它转换的是浮点数，并且支持将输入值转化为10进制数。因此，该函数只有一个参数。
        3.isNaN（）函数#is not a number
        isNaN用与判断确定某个值是否是个可以参加算数运算的数字
        4.isFinite()函数
        isFInite用于判断某个输入值是否即非InFinity也非NaN的具体数字，这是一个集合的概念
        5.eval（）函数
        它的作用是将接收到的字符串实参当作javascript代码来执行
3.5.6编码函数与反编码函数
        在URL和URI中，有一些字符是具有特殊含义的。如果想‘转义’这些字符，就可以调用encode（URI）或者encodeURIComponent()俩个函数
参见的操作线性数据的方法：
    push：在列表末端添加元素
    pop：用于删除列表末端的元素
    unshift：在列表前端添加元素
    join：该方法用于将实参按照其指定的分隔符将列表中的所有元素拼接成一个字符串。如果没有指定分隔符，则默认为逗号。
    sort:该方法用于按照调用方提供的回调函数实参对列表中的元素进行排序
    reserve：该方法用于反转列表中元素的排列顺序
    concat：将当前列表与其实参指定的一个或多个列表连接起来，并作为新的列表返回调用方
    slice：该方法用于截取当前列表的某个实参指定的列表
    splice：用与从当前列表删除或替换实参指定的子列表
    toString：该方法用于将当前列表中的所有元素以逗号为分割符连接拼成一个字符串
4.1面向对象编程
  在面向对象编程的方法论中，我们通常会将要执行某一类操作的对象设计一个抽象的基类，然后以该类的接口来实现其他用于具象化这些操作的类。在编程术语中。我们称这些后类的具体类继承了基类的接口，它们是这个基类的子类，因而基类也被称为父类
  接口一致化的方法，就叫面向对象方程。
4.1.1接口的设计与实现
  在传统面向对象编程语言定义类的时候，通常都会被要求为其属性和方法试试设置private，pulic等不同层级的访问权限。通常情况下，被设置为private的属性和方法则是直接提供给对象内部使用，而别设置为pulic的属性和方法则是直接提供给对象
  的调用供用的。在编程术语上，被设置为public的这部分属性就通常被称为接口。
  设计对象接口的工作本质本质上就是在决定对象的哪一部分应该提供给调用方成为接口，哪一部分应该被视为对象的实现隐藏在对象内部。Javasrcipt在语法层面上并没有提供private、public这种限制权限的机制。为此，我们得使用一些变通手段，来
  实现接口的工作。
  ·编程规范约束。 总所周知，编程协议是程序员自觉遵守的一种协议。它虽然不具有强制性，但是为了团队协作顺畅，降低代码的维护成本，大部分程序员都会选择自觉遵守。例如如果我们不希望外界直接访问它的x，y属性，我们可以在属性名前加上一个
  下划线：


