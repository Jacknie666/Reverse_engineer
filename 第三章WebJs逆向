                               Web Js逆向
  Web页面大家都不陌生，在Web开发中后端负责程序架构和数据管理，前段负责页面展示和用户交互，有一种不严谨的说法：前段代码
给浏览器看，后段代码给服务器看。
  有经验的程序员对前后端交互的理解也会更深一些，在这种前后端分离的开发方式中，以接口为标准来进行联合调整。为了保证接口在调用的
数据的安全性，也为了防止参数被篡改，大多数接口都进行了请求签名，身份验证，动态cookie等机制。另外，部分网站会对返回的数据进行加
密，通常利用AES，RSA等加密方式，也有在传输时对数据进行数列化，比如Protobuf等，这些会在后面进行详细讲解。
  请求签名也十分常见，比如URL中的加密参数sign，身份验证也有很多例子，比如动态Cookie。这些参数的生成都是由js来控制，如果想直
接从接口上获取数据，就要去调试分析javascript的调用逻辑，堆栈的调用关系来弄清楚网站加密方式的实现方法，根据网站的参生成规则还原
加密参数，这个过程称为js逆向。
  目前常用的加密参数逆向方式，一种是根据源码生成逻辑还原加密代码，另一种是补环境Copy源码模拟加密参数的生成，还有一种
就是通过RPC的方式远程调用。相比之下补环境跑代码，整体看起来会更加方便与高效。
  而在一些逆向案例中，其中的关键就是将浏览器环境移植到Node环境中，Node js采用的内核也为v8引擎。该引擎调用Js的可信性并不是100%，同时由于Node没有界面渲染，
因此在游览器中可使用的window，navigator，dom等操作在node中是不存在的，所以对于Node的环境搭建和浏览器环境补全也是js逆向需要掌握的。
  值得一提的是chrome作为Js的核心工具，熟练的掌握Chrome的控制台，插件编写就足够应对大多数的抓包、调试、Hook等，这些内容在后续也会进行讲解。
3.1逆向基础
  Js调试相对方便，通常只需要chrome或者其他的一些抓包工具、拓展插件，就能顺利的完成逆向分析。但是js的弱类型与语法多样各种闭包。逗号表达式等
语法让代码的可读性变得不如其他语言通畅。所有需要学习基础语法。

